[{"C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\index.js":"1","C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\App.jsx":"2","C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\components\\VirtualScroller.jsx":"3"},{"size":206,"mtime":1636852517203,"results":"4","hashOfConfig":"5"},{"size":2296,"mtime":1636853016491,"results":"6","hashOfConfig":"5"},{"size":3587,"mtime":1636853111322,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1trc8kf",{"filePath":"10","messages":"11","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\index.js",[],"C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\App.jsx",["15","16"],"import React, { useEffect, useState } from \"react\";\r\nimport VirtualScroller from \"./components/VirtualScroller\";\r\nimport { csv } from \"d3\";\r\nimport csvdata from \"./components/data.csv\";\r\nimport './index.css';\r\n\r\nconst SETTINGS = {\r\n  //height of each box\r\n  itemHeight: 97,\r\n  //width of each box\r\n  itemWidth: 97,\r\n  //the extra amount that were load in\r\n  tolerance: 5,\r\n  //where you want to start\r\n  //the amount of row to be display\r\n  maxRow: 20,\r\n  //index to start\r\n  startIndex: 0,\r\n  amount: 17\r\n};\r\n\r\n//construct the columns of each row\r\nconst rowTemplate2D = (row, rowIndex) => {\r\n  var indents = [];\r\n  for (let i = 0; i < row.length; i++) {\r\n    indents.push(<td key={`${rowIndex}` + `${i}`}><div className=\"textBox\" style={{ height: SETTINGS.itemHeight, width: SETTINGS.itemWidth }}>{row[i]}</div></td>);\r\n  }\r\n  return indents;\r\n}\r\n\r\n//Consturct the entire table as a 2D array\r\nconst template2D = (item) => {\r\n  var indents = [];\r\n  indents = item.map((target, index) => (\r\n    <tr key={index} style={{ height: SETTINGS.itemHeight }}>\r\n      {rowTemplate2D(target, index)}\r\n    </tr>\r\n  ))\r\n\r\n  return <>{indents}</>;\r\n}\r\n\r\n//Get the data that is specify my the function caller \r\nconst getDataCSV = (offsetX, limitX, dataObject) => {\r\n  if (typeof dataObject === \"undefined\") {\r\n    return [];\r\n  }\r\n  const data = [];\r\n  const startX = Math.max(0, offsetX);\r\n  const endX = Math.min(offsetX + limitX - 1, dataObject[0].length);\r\n\r\n  if (startX <= endX) {\r\n    for (let i = 0; i < SETTINGS.maxRow; i++) {\r\n      data[i] = [];\r\n      for (let j = startX; j < endX; j++) {\r\n        data[i][j - startX] = dataObject[i][j];\r\n      }\r\n    }\r\n  }\r\n  return data;\r\n}\r\n\r\n\r\nfunction App() {\r\n  const [dataObject, setdataObject] = useState();\r\n  //Get the data from the local CSV files\r\n  useEffect(async () => {\r\n    await csv(csvdata).then(data => {\r\n      //Put them into a 2D array where each row is the row and colum is the field\r\n      let data2D = data.map(tag => Object.values(tag));\r\n      setdataObject(data2D);\r\n    })\r\n  }, []);\r\n\r\n  //handle is cause where data retrive is null\r\n  if (!dataObject) {\r\n    return <p>Loading ...</p>;\r\n  }\r\n  return <VirtualScroller get={getDataCSV} dataObject={dataObject} settings={SETTINGS} template={template2D} />\r\n\r\n}\r\n\r\nexport default App;","C:\\Users\\Jucong He\\Desktop\\Linhao's horny dungeon\\VirtualScroller\\src\\components\\VirtualScroller.jsx",["17"],{"ruleId":"18","severity":1,"message":"19","line":26,"column":41,"nodeType":"20","messageId":"21","endLine":26,"endColumn":42},{"ruleId":"22","severity":1,"message":"23","line":67,"column":13,"nodeType":"24","endLine":73,"endColumn":4},{"ruleId":"22","severity":1,"message":"25","line":92,"column":6,"nodeType":"26","endLine":92,"endColumn":44,"suggestions":"27"},"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","React Hook useEffect has a missing dependency: 'dataObject'. Either include it or remove the dependency array. If 'setState' needs the current value of 'dataObject', you can also switch to useReducer instead of useState and read 'dataObject' in the reducer.","ArrayExpression",["28"],{"desc":"29","fix":"30"},"Update the dependencies array to be: [dataObject, get, settings, state.initialPosition]",{"range":"31","text":"32"},[3240,3278],"[dataObject, get, settings, state.initialPosition]"]